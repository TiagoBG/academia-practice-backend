--USAR UNA BASE DE DATOS
USE academia;

--ELIMINAR UNA TABLA SI EXISTE
DROP TABLE IF EXISTS tipo_documento;
DROP TABLE IF EXISTS tipo_actores;
DROP TABLE IF EXISTS estado_actores;
DROP TABLE IF EXISTS modulos;
DROP TABLE IF EXISTS actores;
--LAS TABLAS MAESTRAS (LAS MAS ALEJADAS DEL MODELO RELACIONAL) DEBEN SER LAS ÚLTIMAS EN SER BORRADAS. SIEMPRE SE BORRA DE ADENTRO HACIA AFUERA

--CREAR UNA TABLA CON LAS COLUMNAS Y EL TIPO DE DATO
CREATE TABLE tipo_documento(
    codigo VARCHAR(3) PRIMARY KEY,
    descripcion VARCHAR(100) NOT NULL
);

CREATE TABLE tipo_actores(
    id INT(5) UNSIGNED AUTO_INCREMENT,
    perfil VARCHAR(100),
    PRIMARY KEY(id)
);

CREATE TABLE estado_actores(
    id INTEGER(11) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    estado VARCHAR(30)
) ENGINE=INNODB;

CREATE TABLE modulos(
    id INT(11),
    modulo VARCHAR(255),
    mo VARCHAR(10)
) ENGINE=INNODB;

--AÑADIR UNA PRIMARY KEY
ALTER TABLE modulos
ADD PRIMARY KEY(id);

--ELIMINAR COLUMNAS
ALTER TABLE modulos
DROP COLUMN mo;

--AGREGAR COLUMNAS
ALTER TABLE modulos
ADD COLUMN `mod` VARCHAR(10);

CREATE TABLE actores(
    id INT(5) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    documento VARCHAR(20) NOT NULL UNIQUE,
    tipo_documento VARCHAR(3) NOT NULL,
    nombres VARCHAR(255) NOT NULL,
    apellidos VARCHAR(255),
    contrasena VARCHAR(80) NOT NULL,
    correo VARCHAR(255) NOT NULL DEFAULT 'correo@dominio.com',
    telefono_celular VARCHAR(30) COMMENT 'Teléfono celular del estudiante',
    numero_expediente VARCHAR(255) NOT NULL UNIQUE,
    genero ENUM('Masculino','Femenino') NOT NULL,
    fecha_nacimiento DATE NOT NULL,
    estado_actor_id INT(5) UNSIGNED,
    institucion_id INT(5),
    tipo_actor_id INT(5) UNSIGNED,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (tipo_actor_id) REFERENCES tipo_actores(id)
);

ALTER TABLE actores
ADD CONSTRAINT `fk_estado_actor` 
FOREIGN KEY (`estado_actor_id`) 
REFERENCES `estado_actores`(`id`)
--ESTOS COMANDOS RESTRINGEN LA ELIMINACIÓN Y ACTUALIZACIÓN DE REGISTROS PARA TENER UN DOMINIO SOBRE ESTAS OPERACIONES Y QUE SE EJECUTAN SOBRE LA HIJA CUANDO LA PADRE ES MODIFICADA
    ON DELETE RESTRICT
    ON UPDATE CASCADE;

--CREAR REGISTROS DENTRO DE UNA TABLA (FILAS). DEBEN CONSERVAR EL MISMO ORDEN
INSERT INTO tipo_actores VALUES(1,'Alumno');
INSERT INTO tipo_actores(perfil) VALUES('Docente');
--PARA CREAR MULTIPLES REGISTROS (EN ESTE CASO TENEMOS NUESTRO AUTO INCREMENTABLE)
INSERT INTO tipo_actores(perfil) VALUES('Coordinador'),('Rector');

--PARA ACTUALIZAR REGISTROS EN UNA TABLA. OJO!! MUY IMPORTANTE REVISAR ESTE COMANDO PARA NO BORRAR LOS DEMÁS REGISTROS YA QUE SIN EL "WHERE" MODIFICA TODOS LOS REGISTROS. IMPORTANTE CONTAR CON UN BACKUP DE LA BASE DE DATOS
UPDATE tipo_actores SET perfil = 'Estudiante' WHERE id = 1;
--PARA MULTIPLES ACTUALIZACIONES HAY QUE REVISAR LOS OPERADORES LÓGICOS Y DE MYSQL
UPDATE tipo_actores SET perfil = 'Estudiante' WHERE id IN (1,2,3);
UPDATE tipo_actores SET perfil = 'Estudiante' WHERE id = 1 OR id = 2 OR id = 3;

--ELIMINAR REGISTRO EN UNA TABLA. OJO ESTE COMANDO TAMBIÉN ES DE MUCHISIMO CUIDADO
DELETE FROM tipo_actores WHERE id = 1;

--RESETEA LA TABLA COMPLETAMENTE
TRUNCATE tipo_actores; -- esta es similar a DELETE FROM tipo_actores; a diferencia de que retea también la estructura de la tabla. Cuando hay una relación entre tablas truncate saca error. Para usarla habría que eliminar la relación primero.

--PROYECCION DE LOS CAMPOS (* ME LOS TRAE TODOS)
SELECT * FROM tipo_actores;
SELECT perfil, id, NOW() FROM tipo_actores;

